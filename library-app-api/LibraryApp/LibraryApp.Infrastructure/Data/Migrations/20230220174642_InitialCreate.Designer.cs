// <auto-generated />
using System;
using LibraryApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryApp.Infrastructure.Migrations
{
    [DbContext(typeof(LibraryAppContext))]
    [Migration("20230220174642_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BooksId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");

                    b.HasData(
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 4
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 4,
                            BooksId = 6
                        });
                });

            modelBuilder.Entity("LibraryApp.Core.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DemoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DemoId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DemoId = 1,
                            Name = "Lev Tolstoy"
                        },
                        new
                        {
                            Id = 2,
                            DemoId = 1,
                            Name = "Antoine de Saint-Exupéry"
                        },
                        new
                        {
                            Id = 3,
                            DemoId = 1,
                            Name = "Alexandre Dumas"
                        },
                        new
                        {
                            Id = 4,
                            DemoId = 1,
                            Name = "Aldous Huxley"
                        });
                });

            modelBuilder.Entity("LibraryApp.Core.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DemoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("YearOfPublication")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DemoId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DemoId = 1,
                            Description = "Desctiption Test",
                            ISBN = "979-8589744965",
                            Title = "War and Peace, Volume 1",
                            YearOfPublication = 2021
                        },
                        new
                        {
                            Id = 2,
                            DemoId = 2,
                            Description = "Desctiption Test",
                            ISBN = "979-8589744945",
                            Title = "Test 1",
                            YearOfPublication = 2023
                        },
                        new
                        {
                            Id = 3,
                            DemoId = 3,
                            Description = "Desctiption Test",
                            ISBN = "979-8589744955",
                            Title = "Test 2",
                            YearOfPublication = 2023
                        },
                        new
                        {
                            Id = 4,
                            DemoId = 1,
                            Description = "Desctiption Test",
                            ISBN = " 978-0547978840",
                            Title = "The Little Prince",
                            YearOfPublication = 2013
                        },
                        new
                        {
                            Id = 5,
                            DemoId = 1,
                            Description = "Desctiption Test",
                            ISBN = "978-0140449266",
                            Title = "The Count of Monte Cristo",
                            YearOfPublication = 2003
                        },
                        new
                        {
                            Id = 6,
                            DemoId = 1,
                            Description = "Desctiption Test",
                            ISBN = "978-0060850524",
                            Title = "Brave New World",
                            YearOfPublication = 2006
                        });
                });

            modelBuilder.Entity("LibraryApp.Core.Entities.BookInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DemoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PatronId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("DemoId");

                    b.HasIndex("PatronId");

                    b.ToTable("BookInstances");
                });

            modelBuilder.Entity("LibraryApp.Core.Entities.DemoInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DemoInfo");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        },
                        new
                        {
                            Id = 3
                        });
                });

            modelBuilder.Entity("LibraryApp.Core.Entities.Patron", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DemoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DemoId")
                        .IsUnique();

                    b.ToTable("Patrons");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("LibraryApp.Core.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Core.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryApp.Core.Entities.Author", b =>
                {
                    b.HasOne("LibraryApp.Core.Entities.DemoInfo", "Demo")
                        .WithMany("Authors")
                        .HasForeignKey("DemoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demo");
                });

            modelBuilder.Entity("LibraryApp.Core.Entities.Book", b =>
                {
                    b.HasOne("LibraryApp.Core.Entities.DemoInfo", "Demo")
                        .WithMany("Books")
                        .HasForeignKey("DemoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demo");
                });

            modelBuilder.Entity("LibraryApp.Core.Entities.BookInstance", b =>
                {
                    b.HasOne("LibraryApp.Core.Entities.Book", "Book")
                        .WithMany("bookInstances")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Core.Entities.DemoInfo", "Demo")
                        .WithMany()
                        .HasForeignKey("DemoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Core.Entities.Patron", "Patron")
                        .WithMany("BookInstances")
                        .HasForeignKey("PatronId");

                    b.Navigation("Book");

                    b.Navigation("Demo");

                    b.Navigation("Patron");
                });

            modelBuilder.Entity("LibraryApp.Core.Entities.Patron", b =>
                {
                    b.HasOne("LibraryApp.Core.Entities.DemoInfo", "Demo")
                        .WithOne("Patron")
                        .HasForeignKey("LibraryApp.Core.Entities.Patron", "DemoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demo");
                });

            modelBuilder.Entity("LibraryApp.Core.Entities.Book", b =>
                {
                    b.Navigation("bookInstances");
                });

            modelBuilder.Entity("LibraryApp.Core.Entities.DemoInfo", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Books");

                    b.Navigation("Patron")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryApp.Core.Entities.Patron", b =>
                {
                    b.Navigation("BookInstances");
                });
#pragma warning restore 612, 618
        }
    }
}
